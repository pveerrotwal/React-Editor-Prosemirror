{"ast":null,"code":"import { keymap } from 'prosemirror-keymap';\nimport { undo, redo, history } from 'prosemirror-history';\nimport { toggleMark, wrapIn, chainCommands, exitCode, setBlockType, joinUp, joinDown, lift, selectParentNode, baseKeymap } from 'prosemirror-commands';\nimport { NodeSelection, Plugin } from 'prosemirror-state';\nimport { dropCursor } from 'prosemirror-dropcursor';\nimport { gapCursor } from 'prosemirror-gapcursor';\nimport { icons, MenuItem, wrapItem, blockTypeItem, Dropdown, DropdownSubmenu, joinUpItem, liftItem, selectParentNodeItem, undoItem, redoItem, menuBar } from 'prosemirror-menu';\nimport { wrapInList, splitListItem, liftListItem, sinkListItem } from 'prosemirror-schema-list';\nimport { undoInputRule, smartQuotes, ellipsis, emDash, wrappingInputRule, textblockTypeInputRule, inputRules } from 'prosemirror-inputrules';\nvar prefix = \"ProseMirror-prompt\";\n\nfunction openPrompt(options) {\n  var wrapper = document.body.appendChild(document.createElement(\"div\"));\n  wrapper.className = prefix;\n\n  var mouseOutside = function (e) {\n    if (!wrapper.contains(e.target)) {\n      close();\n    }\n  };\n\n  setTimeout(function () {\n    return window.addEventListener(\"mousedown\", mouseOutside);\n  }, 50);\n\n  var close = function () {\n    window.removeEventListener(\"mousedown\", mouseOutside);\n\n    if (wrapper.parentNode) {\n      wrapper.parentNode.removeChild(wrapper);\n    }\n  };\n\n  var domFields = [];\n\n  for (var name in options.fields) {\n    domFields.push(options.fields[name].render());\n  }\n\n  var submitButton = document.createElement(\"button\");\n  submitButton.type = \"submit\";\n  submitButton.className = prefix + \"-submit\";\n  submitButton.textContent = \"OK\";\n  var cancelButton = document.createElement(\"button\");\n  cancelButton.type = \"button\";\n  cancelButton.className = prefix + \"-cancel\";\n  cancelButton.textContent = \"Cancel\";\n  cancelButton.addEventListener(\"click\", close);\n  var form = wrapper.appendChild(document.createElement(\"form\"));\n\n  if (options.title) {\n    form.appendChild(document.createElement(\"h5\")).textContent = options.title;\n  }\n\n  domFields.forEach(function (field) {\n    form.appendChild(document.createElement(\"div\")).appendChild(field);\n  });\n  var buttons = form.appendChild(document.createElement(\"div\"));\n  buttons.className = prefix + \"-buttons\";\n  buttons.appendChild(submitButton);\n  buttons.appendChild(document.createTextNode(\" \"));\n  buttons.appendChild(cancelButton);\n  var box = wrapper.getBoundingClientRect();\n  wrapper.style.top = (window.innerHeight - box.height) / 2 + \"px\";\n  wrapper.style.left = (window.innerWidth - box.width) / 2 + \"px\";\n\n  var submit = function () {\n    var params = getValues(options.fields, domFields);\n\n    if (params) {\n      close();\n      options.callback(params);\n    }\n  };\n\n  form.addEventListener(\"submit\", function (e) {\n    e.preventDefault();\n    submit();\n  });\n  form.addEventListener(\"keydown\", function (e) {\n    if (e.keyCode == 27) {\n      e.preventDefault();\n      close();\n    } else if (e.keyCode == 13 && !(e.ctrlKey || e.metaKey || e.shiftKey)) {\n      e.preventDefault();\n      submit();\n    } else if (e.keyCode == 9) {\n      window.setTimeout(function () {\n        if (!wrapper.contains(document.activeElement)) {\n          close();\n        }\n      }, 500);\n    }\n  });\n  var input = form.elements[0];\n\n  if (input) {\n    input.focus();\n  }\n}\n\nfunction getValues(fields, domFields) {\n  var result = Object.create(null),\n      i = 0;\n\n  for (var name in fields) {\n    var field = fields[name],\n        dom = domFields[i++];\n    var value = field.read(dom),\n        bad = field.validate(value);\n\n    if (bad) {\n      reportInvalid(dom, bad);\n      return null;\n    }\n\n    result[name] = field.clean(value);\n  }\n\n  return result;\n}\n\nfunction reportInvalid(dom, message) {\n  // FIXME this is awful and needs a lot more work\n  var parent = dom.parentNode;\n  var msg = parent.appendChild(document.createElement(\"div\"));\n  msg.style.left = dom.offsetLeft + dom.offsetWidth + 2 + \"px\";\n  msg.style.top = dom.offsetTop - 5 + \"px\";\n  msg.className = \"ProseMirror-invalid\";\n  msg.textContent = message;\n  setTimeout(function () {\n    return parent.removeChild(msg);\n  }, 1500);\n} // ::- The type of field that `FieldPrompt` expects to be passed to it.\n\n\nvar Field = function Field(options) {\n  this.options = options;\n}; // render:: (state: EditorState, props: Object) → dom.Node\n// Render the field to the DOM. Should be implemented by all subclasses.\n// :: (dom.Node) → any\n// Read the field's value from its DOM node.\n\n\nField.prototype.read = function read(dom) {\n  return dom.value;\n}; // :: (any) → ?string\n// A field-type-specific validation function.\n\n\nField.prototype.validateType = function validateType(_value) {};\n\nField.prototype.validate = function validate(value) {\n  if (!value && this.options.required) {\n    return \"Required field\";\n  }\n\n  return this.validateType(value) || this.options.validate && this.options.validate(value);\n};\n\nField.prototype.clean = function clean(value) {\n  return this.options.clean ? this.options.clean(value) : value;\n}; // ::- A field class for single-line text fields.\n\n\nvar TextField = /*@__PURE__*/function (Field) {\n  function TextField() {\n    Field.apply(this, arguments);\n  }\n\n  if (Field) TextField.__proto__ = Field;\n  TextField.prototype = Object.create(Field && Field.prototype);\n  TextField.prototype.constructor = TextField;\n\n  TextField.prototype.render = function render() {\n    var input = document.createElement(\"input\");\n    input.type = \"text\";\n    input.placeholder = this.options.label;\n    input.value = this.options.value || \"\";\n    input.autocomplete = \"off\";\n    return input;\n  };\n\n  return TextField;\n}(Field); // Helpers to create specific types of items\n\n\nfunction canInsert(state, nodeType) {\n  var $from = state.selection.$from;\n\n  for (var d = $from.depth; d >= 0; d--) {\n    var index = $from.index(d);\n\n    if ($from.node(d).canReplaceWith(index, index, nodeType)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction insertImageItem(nodeType) {\n  return new MenuItem({\n    title: \"Insert image\",\n    label: \"Image\",\n    enable: function enable(state) {\n      return canInsert(state, nodeType);\n    },\n    run: function run(state, _, view) {\n      var ref = state.selection;\n      var from = ref.from;\n      var to = ref.to;\n      var attrs = null;\n\n      if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType) {\n        attrs = state.selection.node.attrs;\n      }\n\n      openPrompt({\n        title: \"Insert image\",\n        fields: {\n          src: new TextField({\n            label: \"Location\",\n            required: true,\n            value: attrs && attrs.src\n          }),\n          title: new TextField({\n            label: \"Title\",\n            value: attrs && attrs.title\n          }),\n          alt: new TextField({\n            label: \"Description\",\n            value: attrs ? attrs.alt : state.doc.textBetween(from, to, \" \")\n          })\n        },\n        callback: function callback(attrs) {\n          view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createAndFill(attrs)));\n          view.focus();\n        }\n      });\n    }\n  });\n}\n\nfunction cmdItem(cmd, options) {\n  var passedOptions = {\n    label: options.title,\n    run: cmd\n  };\n\n  for (var prop in options) {\n    passedOptions[prop] = options[prop];\n  }\n\n  if ((!options.enable || options.enable === true) && !options.select) {\n    passedOptions[options.enable ? \"enable\" : \"select\"] = function (state) {\n      return cmd(state);\n    };\n  }\n\n  return new MenuItem(passedOptions);\n}\n\nfunction markActive(state, type) {\n  var ref = state.selection;\n  var from = ref.from;\n  var $from = ref.$from;\n  var to = ref.to;\n  var empty = ref.empty;\n\n  if (empty) {\n    return type.isInSet(state.storedMarks || $from.marks());\n  } else {\n    return state.doc.rangeHasMark(from, to, type);\n  }\n}\n\nfunction markItem(markType, options) {\n  var passedOptions = {\n    active: function active(state) {\n      return markActive(state, markType);\n    },\n    enable: true\n  };\n\n  for (var prop in options) {\n    passedOptions[prop] = options[prop];\n  }\n\n  return cmdItem(toggleMark(markType), passedOptions);\n}\n\nfunction linkItem(markType) {\n  return new MenuItem({\n    title: \"Add or remove link\",\n    icon: icons.link,\n    active: function active(state) {\n      return markActive(state, markType);\n    },\n    enable: function enable(state) {\n      return !state.selection.empty;\n    },\n    run: function run(state, dispatch, view) {\n      if (markActive(state, markType)) {\n        toggleMark(markType)(state, dispatch);\n        return true;\n      }\n\n      openPrompt({\n        title: \"Create a link\",\n        fields: {\n          href: new TextField({\n            label: \"Link target\",\n            required: true\n          }),\n          title: new TextField({\n            label: \"Title\"\n          })\n        },\n        callback: function callback(attrs) {\n          toggleMark(markType, attrs)(view.state, view.dispatch);\n          view.focus();\n        }\n      });\n    }\n  });\n}\n\nfunction wrapListItem(nodeType, options) {\n  return cmdItem(wrapInList(nodeType, options.attrs), options);\n} // :: (Schema) → Object\n// Given a schema, look for default mark and node types in it and\n// return an object with relevant menu items relating to those marks:\n//\n// **`toggleStrong`**`: MenuItem`\n//   : A menu item to toggle the [strong mark](#schema-basic.StrongMark).\n//\n// **`toggleEm`**`: MenuItem`\n//   : A menu item to toggle the [emphasis mark](#schema-basic.EmMark).\n//\n// **`toggleCode`**`: MenuItem`\n//   : A menu item to toggle the [code font mark](#schema-basic.CodeMark).\n//\n// **`toggleLink`**`: MenuItem`\n//   : A menu item to toggle the [link mark](#schema-basic.LinkMark).\n//\n// **`insertImage`**`: MenuItem`\n//   : A menu item to insert an [image](#schema-basic.Image).\n//\n// **`wrapBulletList`**`: MenuItem`\n//   : A menu item to wrap the selection in a [bullet list](#schema-list.BulletList).\n//\n// **`wrapOrderedList`**`: MenuItem`\n//   : A menu item to wrap the selection in an [ordered list](#schema-list.OrderedList).\n//\n// **`wrapBlockQuote`**`: MenuItem`\n//   : A menu item to wrap the selection in a [block quote](#schema-basic.BlockQuote).\n//\n// **`makeParagraph`**`: MenuItem`\n//   : A menu item to set the current textblock to be a normal\n//     [paragraph](#schema-basic.Paragraph).\n//\n// **`makeCodeBlock`**`: MenuItem`\n//   : A menu item to set the current textblock to be a\n//     [code block](#schema-basic.CodeBlock).\n//\n// **`makeHead[N]`**`: MenuItem`\n//   : Where _N_ is 1 to 6. Menu items to set the current textblock to\n//     be a [heading](#schema-basic.Heading) of level _N_.\n//\n// **`insertHorizontalRule`**`: MenuItem`\n//   : A menu item to insert a horizontal rule.\n//\n// The return value also contains some prefabricated menu elements and\n// menus, that you can use instead of composing your own menu from\n// scratch:\n//\n// **`insertMenu`**`: Dropdown`\n//   : A dropdown containing the `insertImage` and\n//     `insertHorizontalRule` items.\n//\n// **`typeMenu`**`: Dropdown`\n//   : A dropdown containing the items for making the current\n//     textblock a paragraph, code block, or heading.\n//\n// **`fullMenu`**`: [[MenuElement]]`\n//   : An array of arrays of menu elements for use as the full menu\n//     for, for example the [menu bar](https://github.com/prosemirror/prosemirror-menu#user-content-menubar).\n\n\nfunction buildMenuItems(schema) {\n  var r = {},\n      type;\n\n  if (type = schema.marks.strong) {\n    r.toggleStrong = markItem(type, {\n      title: \"Toggle strong style\",\n      icon: icons.strong\n    });\n  }\n\n  if (type = schema.marks.em) {\n    r.toggleEm = markItem(type, {\n      title: \"Toggle emphasis\",\n      icon: icons.em\n    });\n  }\n\n  if (type = schema.marks.code) {\n    r.toggleCode = markItem(type, {\n      title: \"Toggle code font\",\n      icon: icons.code\n    });\n  }\n\n  if (type = schema.marks.link) {\n    r.toggleLink = linkItem(type);\n  }\n\n  if (type = schema.nodes.image) {\n    r.insertImage = insertImageItem(type);\n  }\n\n  if (type = schema.nodes.bullet_list) {\n    r.wrapBulletList = wrapListItem(type, {\n      title: \"Wrap in bullet list\",\n      icon: icons.bulletList\n    });\n  }\n\n  if (type = schema.nodes.ordered_list) {\n    r.wrapOrderedList = wrapListItem(type, {\n      title: \"Wrap in ordered list\",\n      icon: icons.orderedList\n    });\n  }\n\n  if (type = schema.nodes.blockquote) {\n    r.wrapBlockQuote = wrapItem(type, {\n      title: \"Wrap in block quote\",\n      icon: icons.blockquote\n    });\n  }\n\n  if (type = schema.nodes.paragraph) {\n    r.makeParagraph = blockTypeItem(type, {\n      title: \"Change to paragraph\",\n      label: \"Plain\"\n    });\n  }\n\n  if (type = schema.nodes.code_block) {\n    r.makeCodeBlock = blockTypeItem(type, {\n      title: \"Change to code block\",\n      label: \"Code\"\n    });\n  }\n\n  if (type = schema.nodes.heading) {\n    for (var i = 1; i <= 10; i++) {\n      r[\"makeHead\" + i] = blockTypeItem(type, {\n        title: \"Change to heading \" + i,\n        label: \"Level \" + i,\n        attrs: {\n          level: i\n        }\n      });\n    }\n  }\n\n  if (type = schema.nodes.horizontal_rule) {\n    var hr = type;\n    r.insertHorizontalRule = new MenuItem({\n      title: \"Insert horizontal rule\",\n      label: \"Horizontal rule\",\n      enable: function enable(state) {\n        return canInsert(state, hr);\n      },\n      run: function run(state, dispatch) {\n        dispatch(state.tr.replaceSelectionWith(hr.create()));\n      }\n    });\n  }\n\n  var cut = function (arr) {\n    return arr.filter(function (x) {\n      return x;\n    });\n  };\n\n  r.insertMenu = new Dropdown(cut([r.insertImage, r.insertHorizontalRule]), {\n    label: \"Insert\"\n  });\n  r.typeMenu = new Dropdown(cut([r.makeParagraph, r.makeCodeBlock, r.makeHead1 && new DropdownSubmenu(cut([r.makeHead1, r.makeHead2, r.makeHead3, r.makeHead4, r.makeHead5, r.makeHead6]), {\n    label: \"Heading\"\n  })]), {\n    label: \"Type...\"\n  });\n  r.inlineMenu = [cut([r.toggleStrong, r.toggleEm, r.toggleCode, r.toggleLink])];\n  r.blockMenu = [cut([r.wrapBulletList, r.wrapOrderedList, r.wrapBlockQuote, joinUpItem, liftItem, selectParentNodeItem])];\n  r.fullMenu = r.inlineMenu.concat([[r.insertMenu, r.typeMenu]], [[undoItem, redoItem]], r.blockMenu);\n  return r;\n}\n\nvar mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform) : false; // :: (Schema, ?Object) → Object\n// Inspect the given schema looking for marks and nodes from the\n// basic schema, and if found, add key bindings related to them.\n// This will add:\n//\n// * **Mod-b** for toggling [strong](#schema-basic.StrongMark)\n// * **Mod-i** for toggling [emphasis](#schema-basic.EmMark)\n// * **Mod-`** for toggling [code font](#schema-basic.CodeMark)\n// * **Ctrl-Shift-0** for making the current textblock a paragraph\n// * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current\n//   textblock a heading of the corresponding level\n// * **Ctrl-Shift-Backslash** to make the current textblock a code block\n// * **Ctrl-Shift-8** to wrap the selection in an ordered list\n// * **Ctrl-Shift-9** to wrap the selection in a bullet list\n// * **Ctrl->** to wrap the selection in a block quote\n// * **Enter** to split a non-empty textblock in a list item while at\n//   the same time splitting the list item\n// * **Mod-Enter** to insert a hard break\n// * **Mod-_** to insert a horizontal rule\n// * **Backspace** to undo an input rule\n// * **Alt-ArrowUp** to `joinUp`\n// * **Alt-ArrowDown** to `joinDown`\n// * **Mod-BracketLeft** to `lift`\n// * **Escape** to `selectParentNode`\n//\n// You can suppress or map these bindings by passing a `mapKeys`\n// argument, which maps key names (say `\"Mod-B\"` to either `false`, to\n// remove the binding, or a new key name string.\n\nfunction buildKeymap(schema, mapKeys) {\n  var keys = {},\n      type;\n\n  function bind(key, cmd) {\n    if (mapKeys) {\n      var mapped = mapKeys[key];\n\n      if (mapped === false) {\n        return;\n      }\n\n      if (mapped) {\n        key = mapped;\n      }\n    }\n\n    keys[key] = cmd;\n  }\n\n  bind(\"Mod-z\", undo);\n  bind(\"Shift-Mod-z\", redo);\n  bind(\"Backspace\", undoInputRule);\n\n  if (!mac) {\n    bind(\"Mod-y\", redo);\n  }\n\n  bind(\"Alt-ArrowUp\", joinUp);\n  bind(\"Alt-ArrowDown\", joinDown);\n  bind(\"Mod-BracketLeft\", lift);\n  bind(\"Escape\", selectParentNode);\n\n  if (type = schema.marks.strong) {\n    bind(\"Mod-b\", toggleMark(type));\n    bind(\"Mod-B\", toggleMark(type));\n  }\n\n  if (type = schema.marks.em) {\n    bind(\"Mod-i\", toggleMark(type));\n    bind(\"Mod-I\", toggleMark(type));\n  }\n\n  if (type = schema.marks.code) {\n    bind(\"Mod-`\", toggleMark(type));\n  }\n\n  if (type = schema.nodes.bullet_list) {\n    bind(\"Shift-Ctrl-8\", wrapInList(type));\n  }\n\n  if (type = schema.nodes.ordered_list) {\n    bind(\"Shift-Ctrl-9\", wrapInList(type));\n  }\n\n  if (type = schema.nodes.blockquote) {\n    bind(\"Ctrl->\", wrapIn(type));\n  }\n\n  if (type = schema.nodes.hard_break) {\n    var br = type,\n        cmd = chainCommands(exitCode, function (state, dispatch) {\n      dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());\n      return true;\n    });\n    bind(\"Mod-Enter\", cmd);\n    bind(\"Shift-Enter\", cmd);\n\n    if (mac) {\n      bind(\"Ctrl-Enter\", cmd);\n    }\n  }\n\n  if (type = schema.nodes.list_item) {\n    bind(\"Enter\", splitListItem(type));\n    bind(\"Mod-[\", liftListItem(type));\n    bind(\"Mod-]\", sinkListItem(type));\n  }\n\n  if (type = schema.nodes.paragraph) {\n    bind(\"Shift-Ctrl-0\", setBlockType(type));\n  }\n\n  if (type = schema.nodes.code_block) {\n    bind(\"Shift-Ctrl-\\\\\", setBlockType(type));\n  }\n\n  if (type = schema.nodes.heading) {\n    for (var i = 1; i <= 6; i++) {\n      bind(\"Shift-Ctrl-\" + i, setBlockType(type, {\n        level: i\n      }));\n    }\n  }\n\n  if (type = schema.nodes.horizontal_rule) {\n    var hr = type;\n    bind(\"Mod-_\", function (state, dispatch) {\n      dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView());\n      return true;\n    });\n  }\n\n  return keys;\n} // : (NodeType) → InputRule\n// Given a blockquote node type, returns an input rule that turns `\"> \"`\n// at the start of a textblock into a blockquote.\n\n\nfunction blockQuoteRule(nodeType) {\n  return wrappingInputRule(/^\\s*>\\s$/, nodeType);\n} // : (NodeType) → InputRule\n// Given a list node type, returns an input rule that turns a number\n// followed by a dot at the start of a textblock into an ordered list.\n\n\nfunction orderedListRule(nodeType) {\n  return wrappingInputRule(/^(\\d+)\\.\\s$/, nodeType, function (match) {\n    return {\n      order: +match[1]\n    };\n  }, function (match, node) {\n    return node.childCount + node.attrs.order == +match[1];\n  });\n} // : (NodeType) → InputRule\n// Given a list node type, returns an input rule that turns a bullet\n// (dash, plush, or asterisk) at the start of a textblock into a\n// bullet list.\n\n\nfunction bulletListRule(nodeType) {\n  return wrappingInputRule(/^\\s*([-+*])\\s$/, nodeType);\n} // : (NodeType) → InputRule\n// Given a code block node type, returns an input rule that turns a\n// textblock starting with three backticks into a code block.\n\n\nfunction codeBlockRule(nodeType) {\n  return textblockTypeInputRule(/^```$/, nodeType);\n} // : (NodeType, number) → InputRule\n// Given a node type and a maximum level, creates an input rule that\n// turns up to that number of `#` characters followed by a space at\n// the start of a textblock into a heading whose level corresponds to\n// the number of `#` signs.\n\n\nfunction headingRule(nodeType, maxLevel) {\n  return textblockTypeInputRule(new RegExp(\"^(#{1,\" + maxLevel + \"})\\\\s$\"), nodeType, function (match) {\n    return {\n      level: match[1].length\n    };\n  });\n} // : (Schema) → Plugin\n// A set of input rules for creating the basic block quotes, lists,\n// code blocks, and heading.\n\n\nfunction buildInputRules(schema) {\n  var rules = smartQuotes.concat(ellipsis, emDash),\n      type;\n\n  if (type = schema.nodes.blockquote) {\n    rules.push(blockQuoteRule(type));\n  }\n\n  if (type = schema.nodes.ordered_list) {\n    rules.push(orderedListRule(type));\n  }\n\n  if (type = schema.nodes.bullet_list) {\n    rules.push(bulletListRule(type));\n  }\n\n  if (type = schema.nodes.code_block) {\n    rules.push(codeBlockRule(type));\n  }\n\n  if (type = schema.nodes.heading) {\n    rules.push(headingRule(type, 6));\n  }\n\n  return inputRules({\n    rules: rules\n  });\n} // !! This module exports helper functions for deriving a set of basic\n// menu items, input rules, or key bindings from a schema. These\n// values need to know about the schema for two reasons—they need\n// access to specific instances of node and mark types, and they need\n// to know which of the node and mark types that they know about are\n// actually present in the schema.\n//\n// The `exampleSetup` plugin ties these together into a plugin that\n// will automatically enable this basic functionality in an editor.\n// :: (Object) → [Plugin]\n// A convenience plugin that bundles together a simple menu with basic\n// key bindings, input rules, and styling for the example schema.\n// Probably only useful for quickly setting up a passable\n// editor—you'll need more control over your settings in most\n// real-world situations.\n//\n//   options::- The following options are recognized:\n//\n//     schema:: Schema\n//     The schema to generate key bindings and menu items for.\n//\n//     mapKeys:: ?Object\n//     Can be used to [adjust](#example-setup.buildKeymap) the key bindings created.\n//\n//     menuBar:: ?bool\n//     Set to false to disable the menu bar.\n//\n//     history:: ?bool\n//     Set to false to disable the history plugin.\n//\n//     floatingMenu:: ?bool\n//     Set to false to make the menu bar non-floating.\n//\n//     menuContent:: [[MenuItem]]\n//     Can be used to override the menu content.\n\n\nfunction exampleSetup(options) {\n  var plugins = [buildInputRules(options.schema), keymap(buildKeymap(options.schema, options.mapKeys)), keymap(baseKeymap), dropCursor(), gapCursor()];\n\n  if (options.menuBar !== false) {\n    plugins.push(menuBar({\n      floating: options.floatingMenu !== false,\n      content: options.menuContent || buildMenuItems(options.schema).fullMenu\n    }));\n  }\n\n  if (options.history !== false) {\n    plugins.push(history());\n  }\n\n  return plugins.concat(new Plugin({\n    props: {\n      attributes: {\n        class: \"ProseMirror-example-setup-style\"\n      }\n    }\n  }));\n}\n\nexport { buildInputRules, buildKeymap, buildMenuItems, exampleSetup };","map":{"version":3,"sources":["../src/prompt.js","../src/menu.js","../src/keymap.js","../src/inputrules.js","../src/index.js"],"names":["const","let"],"mappings":"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","sourcesContent":["const prefix = \"ProseMirror-prompt\"\n\nexport function openPrompt(options) {\n  let wrapper = document.body.appendChild(document.createElement(\"div\"))\n  wrapper.className = prefix\n\n  let mouseOutside = e => { if (!wrapper.contains(e.target)) close() }\n  setTimeout(() => window.addEventListener(\"mousedown\", mouseOutside), 50)\n  let close = () => {\n    window.removeEventListener(\"mousedown\", mouseOutside)\n    if (wrapper.parentNode) wrapper.parentNode.removeChild(wrapper)\n  }\n\n  let domFields = []\n  for (let name in options.fields) domFields.push(options.fields[name].render())\n\n  let submitButton = document.createElement(\"button\")\n  submitButton.type = \"submit\"\n  submitButton.className = prefix + \"-submit\"\n  submitButton.textContent = \"OK\"\n  let cancelButton = document.createElement(\"button\")\n  cancelButton.type = \"button\"\n  cancelButton.className = prefix + \"-cancel\"\n  cancelButton.textContent = \"Cancel\"\n  cancelButton.addEventListener(\"click\", close)\n\n  let form = wrapper.appendChild(document.createElement(\"form\"))\n  if (options.title) form.appendChild(document.createElement(\"h5\")).textContent = options.title\n  domFields.forEach(field => {\n    form.appendChild(document.createElement(\"div\")).appendChild(field)\n  })\n  let buttons = form.appendChild(document.createElement(\"div\"))\n  buttons.className = prefix + \"-buttons\"\n  buttons.appendChild(submitButton)\n  buttons.appendChild(document.createTextNode(\" \"))\n  buttons.appendChild(cancelButton)\n\n  let box = wrapper.getBoundingClientRect()\n  wrapper.style.top = ((window.innerHeight - box.height) / 2) + \"px\"\n  wrapper.style.left = ((window.innerWidth - box.width) / 2) + \"px\"\n\n  let submit = () => {\n    let params = getValues(options.fields, domFields)\n    if (params) {\n      close()\n      options.callback(params)\n    }\n  }\n\n  form.addEventListener(\"submit\", e => {\n    e.preventDefault()\n    submit()\n  })\n\n  form.addEventListener(\"keydown\", e => {\n    if (e.keyCode == 27) {\n      e.preventDefault()\n      close()\n    } else if (e.keyCode == 13 && !(e.ctrlKey || e.metaKey || e.shiftKey)) {\n      e.preventDefault()\n      submit()\n    } else if (e.keyCode == 9) {\n      window.setTimeout(() => {\n        if (!wrapper.contains(document.activeElement)) close()\n      }, 500)\n    }\n  })\n\n  let input = form.elements[0]\n  if (input) input.focus()\n}\n\nfunction getValues(fields, domFields) {\n  let result = Object.create(null), i = 0\n  for (let name in fields) {\n    let field = fields[name], dom = domFields[i++]\n    let value = field.read(dom), bad = field.validate(value)\n    if (bad) {\n      reportInvalid(dom, bad)\n      return null\n    }\n    result[name] = field.clean(value)\n  }\n  return result\n}\n\nfunction reportInvalid(dom, message) {\n  // FIXME this is awful and needs a lot more work\n  let parent = dom.parentNode\n  let msg = parent.appendChild(document.createElement(\"div\"))\n  msg.style.left = (dom.offsetLeft + dom.offsetWidth + 2) + \"px\"\n  msg.style.top = (dom.offsetTop - 5) + \"px\"\n  msg.className = \"ProseMirror-invalid\"\n  msg.textContent = message\n  setTimeout(() => parent.removeChild(msg), 1500)\n}\n\n// ::- The type of field that `FieldPrompt` expects to be passed to it.\nexport class Field {\n  // :: (Object)\n  // Create a field with the given options. Options support by all\n  // field types are:\n  //\n  // **`value`**`: ?any`\n  //   : The starting value for the field.\n  //\n  // **`label`**`: string`\n  //   : The label for the field.\n  //\n  // **`required`**`: ?bool`\n  //   : Whether the field is required.\n  //\n  // **`validate`**`: ?(any) → ?string`\n  //   : A function to validate the given value. Should return an\n  //     error message if it is not valid.\n  constructor(options) { this.options = options }\n\n  // render:: (state: EditorState, props: Object) → dom.Node\n  // Render the field to the DOM. Should be implemented by all subclasses.\n\n  // :: (dom.Node) → any\n  // Read the field's value from its DOM node.\n  read(dom) { return dom.value }\n\n  // :: (any) → ?string\n  // A field-type-specific validation function.\n  validateType(_value) {}\n\n  validate(value) {\n    if (!value && this.options.required)\n      return \"Required field\"\n    return this.validateType(value) || (this.options.validate && this.options.validate(value))\n  }\n\n  clean(value) {\n    return this.options.clean ? this.options.clean(value) : value\n  }\n}\n\n// ::- A field class for single-line text fields.\nexport class TextField extends Field {\n  render() {\n    let input = document.createElement(\"input\")\n    input.type = \"text\"\n    input.placeholder = this.options.label\n    input.value = this.options.value || \"\"\n    input.autocomplete = \"off\"\n    return input\n  }\n}\n\n\n// ::- A field class for dropdown fields based on a plain `<select>`\n// tag. Expects an option `options`, which should be an array of\n// `{value: string, label: string}` objects, or a function taking a\n// `ProseMirror` instance and returning such an array.\nexport class SelectField extends Field {\n  render() {\n    let select = document.createElement(\"select\")\n    this.options.options.forEach(o => {\n      let opt = select.appendChild(document.createElement(\"option\"))\n      opt.value = o.value\n      opt.selected = o.value == this.options.value\n      opt.label = o.label\n    })\n    return select\n  }\n}\n","import {wrapItem, blockTypeItem, Dropdown, DropdownSubmenu, joinUpItem, liftItem,\n       selectParentNodeItem, undoItem, redoItem, icons, MenuItem} from \"prosemirror-menu\"\nimport {NodeSelection} from \"prosemirror-state\"\nimport {toggleMark} from \"prosemirror-commands\"\nimport {wrapInList} from \"prosemirror-schema-list\"\nimport {TextField, openPrompt} from \"./prompt\"\n\n// Helpers to create specific types of items\n\nfunction canInsert(state, nodeType) {\n  let $from = state.selection.$from\n  for (let d = $from.depth; d >= 0; d--) {\n    let index = $from.index(d)\n    if ($from.node(d).canReplaceWith(index, index, nodeType)) return true\n  }\n  return false\n}\n\nfunction insertImageItem(nodeType) {\n  return new MenuItem({\n    title: \"Insert image\",\n    label: \"Image\",\n    enable(state) { return canInsert(state, nodeType) },\n    run(state, _, view) {\n      let {from, to} = state.selection, attrs = null\n      if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType)\n        attrs = state.selection.node.attrs\n      openPrompt({\n        title: \"Insert image\",\n        fields: {\n          src: new TextField({label: \"Location\", required: true, value: attrs && attrs.src}),\n          title: new TextField({label: \"Title\", value: attrs && attrs.title}),\n          alt: new TextField({label: \"Description\",\n                              value: attrs ? attrs.alt : state.doc.textBetween(from, to, \" \")})\n        },\n        callback(attrs) {\n          view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createAndFill(attrs)))\n          view.focus()\n        }\n      })\n    }\n  })\n}\n\nfunction cmdItem(cmd, options) {\n  let passedOptions = {\n    label: options.title,\n    run: cmd\n  }\n  for (let prop in options) passedOptions[prop] = options[prop]\n  if ((!options.enable || options.enable === true) && !options.select)\n    passedOptions[options.enable ? \"enable\" : \"select\"] = state => cmd(state)\n\n  return new MenuItem(passedOptions)\n}\n\nfunction markActive(state, type) {\n  let {from, $from, to, empty} = state.selection\n  if (empty) return type.isInSet(state.storedMarks || $from.marks())\n  else return state.doc.rangeHasMark(from, to, type)\n}\n\nfunction markItem(markType, options) {\n  let passedOptions = {\n    active(state) { return markActive(state, markType) },\n    enable: true\n  }\n  for (let prop in options) passedOptions[prop] = options[prop]\n  return cmdItem(toggleMark(markType), passedOptions)\n}\n\nfunction linkItem(markType) {\n  return new MenuItem({\n    title: \"Add or remove link\",\n    icon: icons.link,\n    active(state) { return markActive(state, markType) },\n    enable(state) { return !state.selection.empty },\n    run(state, dispatch, view) {\n      if (markActive(state, markType)) {\n        toggleMark(markType)(state, dispatch)\n        return true\n      }\n      openPrompt({\n        title: \"Create a link\",\n        fields: {\n          href: new TextField({\n            label: \"Link target\",\n            required: true\n          }),\n          title: new TextField({label: \"Title\"})\n        },\n        callback(attrs) {\n          toggleMark(markType, attrs)(view.state, view.dispatch)\n          view.focus()\n        }\n      })\n    }\n  })\n}\n\nfunction wrapListItem(nodeType, options) {\n  return cmdItem(wrapInList(nodeType, options.attrs), options)\n}\n\n// :: (Schema) → Object\n// Given a schema, look for default mark and node types in it and\n// return an object with relevant menu items relating to those marks:\n//\n// **`toggleStrong`**`: MenuItem`\n//   : A menu item to toggle the [strong mark](#schema-basic.StrongMark).\n//\n// **`toggleEm`**`: MenuItem`\n//   : A menu item to toggle the [emphasis mark](#schema-basic.EmMark).\n//\n// **`toggleCode`**`: MenuItem`\n//   : A menu item to toggle the [code font mark](#schema-basic.CodeMark).\n//\n// **`toggleLink`**`: MenuItem`\n//   : A menu item to toggle the [link mark](#schema-basic.LinkMark).\n//\n// **`insertImage`**`: MenuItem`\n//   : A menu item to insert an [image](#schema-basic.Image).\n//\n// **`wrapBulletList`**`: MenuItem`\n//   : A menu item to wrap the selection in a [bullet list](#schema-list.BulletList).\n//\n// **`wrapOrderedList`**`: MenuItem`\n//   : A menu item to wrap the selection in an [ordered list](#schema-list.OrderedList).\n//\n// **`wrapBlockQuote`**`: MenuItem`\n//   : A menu item to wrap the selection in a [block quote](#schema-basic.BlockQuote).\n//\n// **`makeParagraph`**`: MenuItem`\n//   : A menu item to set the current textblock to be a normal\n//     [paragraph](#schema-basic.Paragraph).\n//\n// **`makeCodeBlock`**`: MenuItem`\n//   : A menu item to set the current textblock to be a\n//     [code block](#schema-basic.CodeBlock).\n//\n// **`makeHead[N]`**`: MenuItem`\n//   : Where _N_ is 1 to 6. Menu items to set the current textblock to\n//     be a [heading](#schema-basic.Heading) of level _N_.\n//\n// **`insertHorizontalRule`**`: MenuItem`\n//   : A menu item to insert a horizontal rule.\n//\n// The return value also contains some prefabricated menu elements and\n// menus, that you can use instead of composing your own menu from\n// scratch:\n//\n// **`insertMenu`**`: Dropdown`\n//   : A dropdown containing the `insertImage` and\n//     `insertHorizontalRule` items.\n//\n// **`typeMenu`**`: Dropdown`\n//   : A dropdown containing the items for making the current\n//     textblock a paragraph, code block, or heading.\n//\n// **`fullMenu`**`: [[MenuElement]]`\n//   : An array of arrays of menu elements for use as the full menu\n//     for, for example the [menu bar](https://github.com/prosemirror/prosemirror-menu#user-content-menubar).\nexport function buildMenuItems(schema) {\n  let r = {}, type\n  if (type = schema.marks.strong)\n    r.toggleStrong = markItem(type, {title: \"Toggle strong style\", icon: icons.strong})\n  if (type = schema.marks.em)\n    r.toggleEm = markItem(type, {title: \"Toggle emphasis\", icon: icons.em})\n  if (type = schema.marks.code)\n    r.toggleCode = markItem(type, {title: \"Toggle code font\", icon: icons.code})\n  if (type = schema.marks.link)\n    r.toggleLink = linkItem(type)\n\n  if (type = schema.nodes.image)\n    r.insertImage = insertImageItem(type)\n  if (type = schema.nodes.bullet_list)\n    r.wrapBulletList = wrapListItem(type, {\n      title: \"Wrap in bullet list\",\n      icon: icons.bulletList\n    })\n  if (type = schema.nodes.ordered_list)\n    r.wrapOrderedList = wrapListItem(type, {\n      title: \"Wrap in ordered list\",\n      icon: icons.orderedList\n    })\n  if (type = schema.nodes.blockquote)\n    r.wrapBlockQuote = wrapItem(type, {\n      title: \"Wrap in block quote\",\n      icon: icons.blockquote\n    })\n  if (type = schema.nodes.paragraph)\n    r.makeParagraph = blockTypeItem(type, {\n      title: \"Change to paragraph\",\n      label: \"Plain\"\n    })\n  if (type = schema.nodes.code_block)\n    r.makeCodeBlock = blockTypeItem(type, {\n      title: \"Change to code block\",\n      label: \"Code\"\n    })\n  if (type = schema.nodes.heading)\n    for (let i = 1; i <= 10; i++)\n      r[\"makeHead\" + i] = blockTypeItem(type, {\n        title: \"Change to heading \" + i,\n        label: \"Level \" + i,\n        attrs: {level: i}\n      })\n  if (type = schema.nodes.horizontal_rule) {\n    let hr = type\n    r.insertHorizontalRule = new MenuItem({\n      title: \"Insert horizontal rule\",\n      label: \"Horizontal rule\",\n      enable(state) { return canInsert(state, hr) },\n      run(state, dispatch) { dispatch(state.tr.replaceSelectionWith(hr.create())) }\n    })\n  }\n\n  let cut = arr => arr.filter(x => x)\n  r.insertMenu = new Dropdown(cut([r.insertImage, r.insertHorizontalRule]), {label: \"Insert\"})\n  r.typeMenu = new Dropdown(cut([r.makeParagraph, r.makeCodeBlock, r.makeHead1 && new DropdownSubmenu(cut([\n    r.makeHead1, r.makeHead2, r.makeHead3, r.makeHead4, r.makeHead5, r.makeHead6\n  ]), {label: \"Heading\"})]), {label: \"Type...\"})\n\n  r.inlineMenu = [cut([r.toggleStrong, r.toggleEm, r.toggleCode, r.toggleLink])]\n  r.blockMenu = [cut([r.wrapBulletList, r.wrapOrderedList, r.wrapBlockQuote, joinUpItem,\n                      liftItem, selectParentNodeItem])]\n  r.fullMenu = r.inlineMenu.concat([[r.insertMenu, r.typeMenu]], [[undoItem, redoItem]], r.blockMenu)\n\n  return r\n}\n","import {wrapIn, setBlockType, chainCommands, toggleMark, exitCode,\n        joinUp, joinDown, lift, selectParentNode} from \"prosemirror-commands\"\nimport {wrapInList, splitListItem, liftListItem, sinkListItem} from \"prosemirror-schema-list\"\nimport {undo, redo} from \"prosemirror-history\"\nimport {undoInputRule} from \"prosemirror-inputrules\"\n\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform) : false\n\n// :: (Schema, ?Object) → Object\n// Inspect the given schema looking for marks and nodes from the\n// basic schema, and if found, add key bindings related to them.\n// This will add:\n//\n// * **Mod-b** for toggling [strong](#schema-basic.StrongMark)\n// * **Mod-i** for toggling [emphasis](#schema-basic.EmMark)\n// * **Mod-`** for toggling [code font](#schema-basic.CodeMark)\n// * **Ctrl-Shift-0** for making the current textblock a paragraph\n// * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current\n//   textblock a heading of the corresponding level\n// * **Ctrl-Shift-Backslash** to make the current textblock a code block\n// * **Ctrl-Shift-8** to wrap the selection in an ordered list\n// * **Ctrl-Shift-9** to wrap the selection in a bullet list\n// * **Ctrl->** to wrap the selection in a block quote\n// * **Enter** to split a non-empty textblock in a list item while at\n//   the same time splitting the list item\n// * **Mod-Enter** to insert a hard break\n// * **Mod-_** to insert a horizontal rule\n// * **Backspace** to undo an input rule\n// * **Alt-ArrowUp** to `joinUp`\n// * **Alt-ArrowDown** to `joinDown`\n// * **Mod-BracketLeft** to `lift`\n// * **Escape** to `selectParentNode`\n//\n// You can suppress or map these bindings by passing a `mapKeys`\n// argument, which maps key names (say `\"Mod-B\"` to either `false`, to\n// remove the binding, or a new key name string.\nexport function buildKeymap(schema, mapKeys) {\n  let keys = {}, type\n  function bind(key, cmd) {\n    if (mapKeys) {\n      let mapped = mapKeys[key]\n      if (mapped === false) return\n      if (mapped) key = mapped\n    }\n    keys[key] = cmd\n  }\n\n\n  bind(\"Mod-z\", undo)\n  bind(\"Shift-Mod-z\", redo)\n  bind(\"Backspace\", undoInputRule)\n  if (!mac) bind(\"Mod-y\", redo)\n\n  bind(\"Alt-ArrowUp\", joinUp)\n  bind(\"Alt-ArrowDown\", joinDown)\n  bind(\"Mod-BracketLeft\", lift)\n  bind(\"Escape\", selectParentNode)\n\n  if (type = schema.marks.strong) {\n    bind(\"Mod-b\", toggleMark(type))\n    bind(\"Mod-B\", toggleMark(type))\n  }\n  if (type = schema.marks.em) {\n    bind(\"Mod-i\", toggleMark(type))\n    bind(\"Mod-I\", toggleMark(type))\n  }\n  if (type = schema.marks.code)\n    bind(\"Mod-`\", toggleMark(type))\n\n  if (type = schema.nodes.bullet_list)\n    bind(\"Shift-Ctrl-8\", wrapInList(type))\n  if (type = schema.nodes.ordered_list)\n    bind(\"Shift-Ctrl-9\", wrapInList(type))\n  if (type = schema.nodes.blockquote)\n    bind(\"Ctrl->\", wrapIn(type))\n  if (type = schema.nodes.hard_break) {\n    let br = type, cmd = chainCommands(exitCode, (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView())\n      return true\n    })\n    bind(\"Mod-Enter\", cmd)\n    bind(\"Shift-Enter\", cmd)\n    if (mac) bind(\"Ctrl-Enter\", cmd)\n  }\n  if (type = schema.nodes.list_item) {\n    bind(\"Enter\", splitListItem(type))\n    bind(\"Mod-[\", liftListItem(type))\n    bind(\"Mod-]\", sinkListItem(type))\n  }\n  if (type = schema.nodes.paragraph)\n    bind(\"Shift-Ctrl-0\", setBlockType(type))\n  if (type = schema.nodes.code_block)\n    bind(\"Shift-Ctrl-\\\\\", setBlockType(type))\n  if (type = schema.nodes.heading)\n    for (let i = 1; i <= 6; i++) bind(\"Shift-Ctrl-\" + i, setBlockType(type, {level: i}))\n  if (type = schema.nodes.horizontal_rule) {\n    let hr = type\n    bind(\"Mod-_\", (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView())\n      return true\n    })\n  }\n\n  return keys\n}\n","import {inputRules, wrappingInputRule, textblockTypeInputRule,\n        smartQuotes, emDash, ellipsis} from \"prosemirror-inputrules\"\n\n// : (NodeType) → InputRule\n// Given a blockquote node type, returns an input rule that turns `\"> \"`\n// at the start of a textblock into a blockquote.\nexport function blockQuoteRule(nodeType) {\n  return wrappingInputRule(/^\\s*>\\s$/, nodeType)\n}\n\n// : (NodeType) → InputRule\n// Given a list node type, returns an input rule that turns a number\n// followed by a dot at the start of a textblock into an ordered list.\nexport function orderedListRule(nodeType) {\n  return wrappingInputRule(/^(\\d+)\\.\\s$/, nodeType, match => ({order: +match[1]}),\n                           (match, node) => node.childCount + node.attrs.order == +match[1])\n}\n\n// : (NodeType) → InputRule\n// Given a list node type, returns an input rule that turns a bullet\n// (dash, plush, or asterisk) at the start of a textblock into a\n// bullet list.\nexport function bulletListRule(nodeType) {\n  return wrappingInputRule(/^\\s*([-+*])\\s$/, nodeType)\n}\n\n// : (NodeType) → InputRule\n// Given a code block node type, returns an input rule that turns a\n// textblock starting with three backticks into a code block.\nexport function codeBlockRule(nodeType) {\n  return textblockTypeInputRule(/^```$/, nodeType)\n}\n\n// : (NodeType, number) → InputRule\n// Given a node type and a maximum level, creates an input rule that\n// turns up to that number of `#` characters followed by a space at\n// the start of a textblock into a heading whose level corresponds to\n// the number of `#` signs.\nexport function headingRule(nodeType, maxLevel) {\n  return textblockTypeInputRule(new RegExp(\"^(#{1,\" + maxLevel + \"})\\\\s$\"),\n                                nodeType, match => ({level: match[1].length}))\n}\n\n// : (Schema) → Plugin\n// A set of input rules for creating the basic block quotes, lists,\n// code blocks, and heading.\nexport function buildInputRules(schema) {\n  let rules = smartQuotes.concat(ellipsis, emDash), type\n  if (type = schema.nodes.blockquote) rules.push(blockQuoteRule(type))\n  if (type = schema.nodes.ordered_list) rules.push(orderedListRule(type))\n  if (type = schema.nodes.bullet_list) rules.push(bulletListRule(type))\n  if (type = schema.nodes.code_block) rules.push(codeBlockRule(type))\n  if (type = schema.nodes.heading) rules.push(headingRule(type, 6))\n  return inputRules({rules})\n}\n","import {keymap} from \"prosemirror-keymap\"\nimport {history} from \"prosemirror-history\"\nimport {baseKeymap} from \"prosemirror-commands\"\nimport {Plugin} from \"prosemirror-state\"\nimport {dropCursor} from \"prosemirror-dropcursor\"\nimport {gapCursor} from \"prosemirror-gapcursor\"\nimport {menuBar} from \"prosemirror-menu\"\n\nimport {buildMenuItems} from \"./menu\"\nimport {buildKeymap} from \"./keymap\"\nimport {buildInputRules} from \"./inputrules\"\n\nexport {buildMenuItems, buildKeymap, buildInputRules}\n\n// !! This module exports helper functions for deriving a set of basic\n// menu items, input rules, or key bindings from a schema. These\n// values need to know about the schema for two reasons—they need\n// access to specific instances of node and mark types, and they need\n// to know which of the node and mark types that they know about are\n// actually present in the schema.\n//\n// The `exampleSetup` plugin ties these together into a plugin that\n// will automatically enable this basic functionality in an editor.\n\n// :: (Object) → [Plugin]\n// A convenience plugin that bundles together a simple menu with basic\n// key bindings, input rules, and styling for the example schema.\n// Probably only useful for quickly setting up a passable\n// editor—you'll need more control over your settings in most\n// real-world situations.\n//\n//   options::- The following options are recognized:\n//\n//     schema:: Schema\n//     The schema to generate key bindings and menu items for.\n//\n//     mapKeys:: ?Object\n//     Can be used to [adjust](#example-setup.buildKeymap) the key bindings created.\n//\n//     menuBar:: ?bool\n//     Set to false to disable the menu bar.\n//\n//     history:: ?bool\n//     Set to false to disable the history plugin.\n//\n//     floatingMenu:: ?bool\n//     Set to false to make the menu bar non-floating.\n//\n//     menuContent:: [[MenuItem]]\n//     Can be used to override the menu content.\nexport function exampleSetup(options) {\n  let plugins = [\n    buildInputRules(options.schema),\n    keymap(buildKeymap(options.schema, options.mapKeys)),\n    keymap(baseKeymap),\n    dropCursor(),\n    gapCursor()\n  ]\n  if (options.menuBar !== false)\n    plugins.push(menuBar({floating: options.floatingMenu !== false,\n                          content: options.menuContent || buildMenuItems(options.schema).fullMenu}))\n  if (options.history !== false)\n    plugins.push(history())\n\n  return plugins.concat(new Plugin({\n    props: {\n      attributes: {class: \"ProseMirror-example-setup-style\"}\n    }\n  }))\n}\n"]},"metadata":{},"sourceType":"module"}